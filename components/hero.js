import React, { useState, useEffect } from "react";
import { FaFire, FaPlus, FaTrash } from "react-icons/fa";
import Link from "next/link";
import MeditationActivity from "./MeditationActivity";
import TakeBreakActivity from "./TakeBreakActivity";
import BottomBar from "./BottomBar";
import { motion } from "framer-motion";
import Confetti from "react-confetti";

const WorkGamificationApp = () => {
  const [showMeditation, setShowMeditation] = useState(false);
  const [showTakeBreak, setShowTakeBreak] = useState(false);
  const [totalDiamonds, setTotalDiamonds] = useState(0);
  const [dailyStreak, setDailyStreak] = useState(0);
  const [dailyTasks, setDailyTasks] = useState([]);
  const [newTask, setNewTask] = useState("");
  const [activityCounts, setActivityCounts] = useState({
    meditation: 0,
    break: 0,
    goals: 0,
    workSession: 0,
  });
  const [completedTasksCount, setCompletedTasksCount] = useState(0);
  const [showConfetti, setShowConfetti] = useState(false);
  const [showAllTasksCompleted, setShowAllTasksCompleted] = useState(false);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–ª–º–∞–∑–æ–≤ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–µ—Ä–∏–∏ –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const storedDiamonds = localStorage.getItem("totalDiamonds");
    const storedStreak = localStorage.getItem("dailyStreak");
    const lastLoginDate = localStorage.getItem("lastLoginDate");
    const storedTasks = localStorage.getItem("dailyTasks");
    const storedActivityCounts = localStorage.getItem("activityCounts");
    const storedCompletedTasksCount = localStorage.getItem(
      "completedTasksCount"
    );
    const today = new Date().toDateString();

    if (storedDiamonds) {
      setTotalDiamonds(parseInt(storedDiamonds, 10));
    }
    if (storedStreak) {
      if (lastLoginDate === today) {
        setDailyStreak(parseInt(storedStreak, 10));
      } else if (
        lastLoginDate === new Date(Date.now() - 86400000).toDateString()
      ) {
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥ –±—ã–ª –≤—á–µ—Ä–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é
        const newStreak = parseInt(storedStreak, 10) + 1;
        setDailyStreak(newStreak);
        localStorage.setItem("dailyStreak", newStreak.toString());
        localStorage.setItem("lastLoginDate", today);
      } else {
        // –ï—Å–ª–∏ —Å–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ 1
        setDailyStreak(1);
        localStorage.setItem("dailyStreak", "1");
        localStorage.setItem("lastLoginDate", today);
      }
    } else {
      // –ï—Å–ª–∏ —Å–µ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë
      localStorage.setItem("dailyStreak", "1");
      localStorage.setItem("lastLoginDate", today);
      setDailyStreak(1);
    }
    if (storedTasks) {
      setDailyTasks(JSON.parse(storedTasks));
    }
    if (storedActivityCounts) {
      setActivityCounts(JSON.parse(storedActivityCounts));
    }
    if (storedCompletedTasksCount) {
      setCompletedTasksCount(parseInt(storedCompletedTasksCount, 10));
    }
  }, []);

  const handleActivityClick = (activityName) => {
    if (activityName === "–ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å") {
      setShowMeditation(true);
      updateActivityCount("meditation");
    } else if (activityName === "–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤") {
      setShowTakeBreak(true);
      updateActivityCount("break");
    } else if (activityName === "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏") {
      updateActivityCount("goals");
      // Implement goal setting functionality
    } else if (activityName === "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é") {
      updateActivityCount("workSession");
      // Implement work session functionality
    }
  };

  const updateActivityCount = (activityType) => {
    setActivityCounts((prevCounts) => {
      const newCounts = {
        ...prevCounts,
        [activityType]: prevCounts[activityType] + 1,
      };
      localStorage.setItem("activityCounts", JSON.stringify(newCounts));
      return newCounts;
    });
  };

  const handleMeditationClose = () => {
    setShowMeditation(false);
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–ª–º–∞–∑–æ–≤ –∏–∑ localStorage
    const updatedDiamonds = localStorage.getItem("totalDiamonds");
    if (updatedDiamonds) {
      setTotalDiamonds(parseInt(updatedDiamonds, 10));
    }
    // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–µ—Ä–∏—é –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–æ–≤–æ–º –≤—Ö–æ–¥–µ –ø–æ—Å–ª–µ 24 —á–∞—Å–æ–≤
  };

  const handleAddTask = () => {
    if (newTask.trim() !== "") {
      const updatedTasks = [...dailyTasks, { text: newTask, completed: false }];
      setDailyTasks(updatedTasks);
      localStorage.setItem("dailyTasks", JSON.stringify(updatedTasks));
      setNewTask("");
    }
  };

  const handleToggleTask = (index) => {
    const updatedTasks = dailyTasks.map((task, i) =>
      i === index ? { ...task, completed: !task.completed } : task
    );
    setDailyTasks(updatedTasks);
    localStorage.setItem("dailyTasks", JSON.stringify(updatedTasks));

    const newCompletedTasksCount = updatedTasks.filter(
      (task) => task.completed
    ).length;
    setCompletedTasksCount(newCompletedTasksCount);
    localStorage.setItem(
      "completedTasksCount",
      newCompletedTasksCount.toString()
    );

    if (
      newCompletedTasksCount === updatedTasks.length &&
      updatedTasks.length > 0
    ) {
      setShowConfetti(true);
      setShowAllTasksCompleted(true);
      setTimeout(() => setShowConfetti(false), 5000);
      setTimeout(() => setShowAllTasksCompleted(false), 5000);
    }
  };

  const handleClearTasks = () => {
    setDailyTasks([]);
    setCompletedTasksCount(0);
    localStorage.setItem("dailyTasks", JSON.stringify([]));
    localStorage.setItem("completedTasksCount", "0");
    setShowConfetti(false);
    setShowAllTasksCompleted(false);
  };

  const calculateProgress = () => {
    if (dailyTasks.length === 0) return 0;
    return Math.round((completedTasksCount / dailyTasks.length) * 100);
  };

  return (
    <div className="bg-gradient-to-b from-blue-100 to-purple-100 min-h-screen p-6 flex flex-col">
      {showConfetti && <Confetti />}
      <header className="flex justify-between items-center mb-6">
        <div className="flex items-center">
          <img
            src="/unnamed.png"
            alt="–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            className="w-16 h-16 rounded-full mr-3 object-cover"
          />
          <div>
            <p className="text-gray-500 text-lg">–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º,</p>
            <h1 className="text-xl font-bold">–ü–∞–Ω –°–∞—à–æ–≤!</h1>
          </div>
        </div>

        <div className="bg-yellow-400 text-white px-4 py-2 rounded-full flex items-center text-xl">
          <span className="mr-2">üíé</span>
          <span>{totalDiamonds}</span>
        </div>
      </header>

      <div className="bg-green-400 rounded-lg p-6 mb-8 flex-grow">
        <p className="text-white text-xl">–ü—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏</p>
        <p className="text-white text-lg">–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!</p>
        <div className="flex justify-between items-center mt-4">
          <span className="text-white text-5xl font-bold">üìä</span>
          <div className="relative w-32 h-32">
            <svg className="w-full h-full" viewBox="0 0 100 100">
              <circle
                className="text-green-200 stroke-current"
                strokeWidth="10"
                cx="50"
                cy="50"
                r="40"
                fill="transparent"
              ></circle>
              <motion.circle
                className="text-yellow-300 stroke-current"
                strokeWidth="10"
                strokeLinecap="round"
                cx="50"
                cy="50"
                r="40"
                fill="transparent"
                initial={{ strokeDashoffset: 251.2 }}
                animate={{
                  strokeDashoffset: 251.2 - (251.2 * calculateProgress()) / 100,
                }}
                transition={{ duration: 0.5, ease: "easeInOut" }}
                strokeDasharray="251.2"
                transform="rotate(-90 50 50)"
              ></motion.circle>
            </svg>
            <div className="absolute top-0 left-0 w-full h-full flex items-center justify-center">
              <motion.span
                className="text-2xl text-white font-bold"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5, ease: "easeInOut" }}
              >
                {calculateProgress()}%
              </motion.span>
            </div>
          </div>
        </div>
        <div className="mt-4">
          <h3 className="text-white text-xl mb-2">–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</h3>
          <ul className="space-y-2">
            {dailyTasks.map((task, index) => (
              <li key={index} className="flex items-center">
                <input
                  type="checkbox"
                  checked={task.completed}
                  onChange={() => handleToggleTask(index)}
                  className="mr-2"
                />
                <span
                  className={`text-white ${
                    task.completed ? "line-through" : ""
                  }`}
                >
                  {task.text}
                </span>
              </li>
            ))}
          </ul>
          <div className="flex mt-4">
            <input
              type="text"
              value={newTask}
              onChange={(e) => setNewTask(e.target.value)}
              placeholder="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"
              className="flex-grow p-2 rounded-l-lg"
            />
            <button
              onClick={handleAddTask}
              className="bg-yellow-300 text-white p-2 rounded-r-lg"
            >
              <FaPlus />
            </button>
          </div>
        </div>
      </div>

      <div className="bg-gradient-to-r from-orange-400 to-red-500 rounded-lg p-6 mb-8 shadow-lg">
        <h2 className="text-2xl font-bold mb-4 text-white flex items-center">
          <FaFire className="mr-3 text-yellow-300 text-3xl" />
          –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ç—Ä–∏–∫
        </h2>
        <div className="flex items-center justify-between">
          {dailyStreak === 0 ? (
            <div className="text-white text-center w-full">
              <p className="text-3xl font-bold mb-2">
                –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ—é —Å–µ—Ä–∏—é —Å–µ–≥–æ–¥–Ω—è!
              </p>
              <p className="text-xl">
                –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å
              </p>
            </div>
          ) : (
            <>
              <div className="flex flex-col items-center">
                <p className="text-white text-6xl font-bold mb-2">
                  {dailyStreak}
                </p>
                <p className="text-white text-xl">
                  {dailyStreak === 1 ? "–¥–µ–Ω—å" : "–¥–Ω–µ–π"}
                </p>
              </div>
              <div className="text-white text-xl flex-grow ml-6">
                <p className="font-bold text-2xl mb-2">
                  {dailyStreak < 7 ? "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!" : "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"}
                </p>
                <p className="text-lg">
                  {dailyStreak < 7
                    ? `${7 - dailyStreak} –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ö–∏!`
                    : `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –≤–µ—Ö–∏ –≤ ${
                        Math.floor(dailyStreak / 7) * 7
                      } –¥–Ω–µ–π!`}
                </p>
                <div className="mt-3 bg-white bg-opacity-20 rounded-full h-2">
                  <div
                    className="bg-yellow-300 h-2 rounded-full"
                    style={{ width: `${((dailyStreak % 7) / 7) * 100}%` }}
                  ></div>
                </div>
              </div>
            </>
          )}
        </div>
      </div>

      <BottomBar />

      {showMeditation ? (
        <MeditationActivity onClose={handleMeditationClose} />
      ) : showTakeBreak ? (
        <TakeBreakActivity onClose={() => setShowTakeBreak(false)} />
      ) : (
        <>
          <h2 className="text-2xl font-bold mb-6">–ü–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h2>
          <div className="grid grid-cols-2 gap-6 mb-20">
            {[
              { name: "–ú–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å", icon: "üßò" },
              { name: "–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", icon: "‚òï" },
              { name: "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏", icon: "üéØ" },
              { name: "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é", icon: "‚è±Ô∏è" },
            ].map((activity, index) => (
              <div
                key={index}
                className={`p-6 rounded-lg flex flex-col items-center justify-center ${getBackgroundColor(
                  index
                )} h-32 cursor-pointer`}
                onClick={() => handleActivityClick(activity.name)}
              >
                <span className="text-white text-4xl mb-2">
                  {activity.icon}
                </span>
                <span className="text-white text-lg text-center">
                  {activity.name}
                </span>
              </div>
            ))}
          </div>
        </>
      )}

      {showAllTasksCompleted && (
        <div className="fixed center left-0 right-0 bg-yellow-300 text-white p-4 flex justify-between items-center rounded-t-lg">
          <span className="font-bold">–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</span>
          <button
            onClick={handleClearTasks}
            className="bg-red-500 text-white px-4 py-2 rounded-lg flex items-center"
          >
            <FaTrash className="mr-2" />
            –û—á–∏—Å—Ç–∏—Ç—å
          </button>
        </div>
      )}
    </div>
  );
};

const getBackgroundColor = (index) => {
  const colors = [
    "bg-blue-400",
    "bg-purple-400",
    "bg-pink-400",
    "bg-indigo-400",
  ];
  return colors[index % colors.length];
};

export default WorkGamificationApp;
